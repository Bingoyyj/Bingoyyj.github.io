<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>oj</title>
    <url>/oj/</url>
    <content><![CDATA[<h1 id="潜规则"><a href="#潜规则" class="headerlink" title="潜规则"></a>潜规则</h1><ul>
<li>输出后不留空格，下可留换行</li>
</ul>
<h1 id="经典算法"><a href="#经典算法" class="headerlink" title="经典算法"></a>经典算法</h1><h2 id="Minecraft"><a href="#Minecraft" class="headerlink" title="Minecraft"></a>Minecraft</h2><p>描述</p>
<blockquote>
<p>Minecraft是一个几乎无所不能的沙盒游戏，玩家可以利用游戏内的各种资源进行创造，搭建自己的世界。<br>在Minecraft中，基本的建筑元素是边长为1个单位的立方体，Tony想用N个这种小立方体搭建一个长方体，并用他珍藏已久的贴纸对其进行装饰。如果一张贴纸可以贴满小立方体的一个面。那么，他需要用掉多少张贴纸呢？</p>
</blockquote>
<p>输入</p>
<blockquote>
<p>一个整数N，表示小明所拥有的小立方体的个数。N不会超过1000。</p>
</blockquote>
<p>输出</p>
<blockquote>
<p>一个整数，即小明最少用掉的贴纸有多少张。</p>
</blockquote>
<p>输入样例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9</span><br></pre></td></tr></table></figure>
<p>输出样例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">30</span><br></pre></td></tr></table></figure>
<p>参考代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">min</span>=INT_MAX;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n%(i*j)==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">int</span> k=n/(i*j),s;</span><br><span class="line">                s=<span class="number">2</span>*(i*j+i*k+j*k);</span><br><span class="line">                <span class="keyword">if</span>(s&lt;<span class="built_in">min</span>)</span><br><span class="line">                    <span class="built_in">min</span>=s;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">min</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线段相交"><a href="#线段相交" class="headerlink" title="线段相交"></a>线段相交</h2><p>描述</p>
<blockquote>
<p>每个线段是用平面上的两个点来描述，用结构体实现对于任意输入的2个线段，判断其是否相交。<br>提示：两点(x1,y1), (x2,y2) 间直线斜率是k=(y2-y1)/(x2-x1).</p>
</blockquote>
<p>输入</p>
<blockquote>
<p>判断次数和2条线段的x1、y1、x2、y2</p>
</blockquote>
<p>输出</p>
<blockquote>
<p>是否相交</p>
</blockquote>
<p>输入样例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 </span><br><span class="line">1 5 2 9</span><br><span class="line">1 3 2 4 </span><br><span class="line">5 6 7 8 </span><br><span class="line">5 7 7 7 </span><br><span class="line">2 5 1 0 </span><br><span class="line">9 4 2 9</span><br></pre></td></tr></table></figure>
<p>输出样例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">disjoint</span><br><span class="line">intersect</span><br><span class="line">disjoint</span><br></pre></td></tr></table></figure>
<p>参考代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">point</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x1,y1,x2,y2;</span><br><span class="line">    <span class="keyword">double</span> k;</span><br><span class="line">    <span class="keyword">double</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        <span class="built_in">point</span> point1,point2;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;point1.x1&gt;&gt;point1.y1&gt;&gt;point1.x2&gt;&gt;point1.y2;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;point2.x1&gt;&gt;point2.y1&gt;&gt;point2.x2&gt;&gt;point2.y2;</span><br><span class="line">        point1.k=<span class="keyword">float</span>(point1.y2-point1.y1)/<span class="keyword">float</span>(point1.x2-point1.x1);</span><br><span class="line">        point2.k=<span class="keyword">float</span>(point2.y2-point2.y1)/<span class="keyword">float</span>(point2.x2-point2.x1);</span><br><span class="line">        point1.b=point1.y1-point1.k*point1.x1;</span><br><span class="line">        point2.b=point2.y1-point2.k*point2.x1;</span><br><span class="line">        <span class="keyword">double</span> y1,y2,y3,y4;</span><br><span class="line">        y1=point1.k*point2.x1+point1.b-point2.y1;</span><br><span class="line">        y2=point1.k*point2.x2+point1.b-point2.y2;</span><br><span class="line">        y3=point2.k*point1.x1+point2.b-point1.y1;</span><br><span class="line">        y4=point2.k*point1.x2+point2.b-point1.y2;</span><br><span class="line">        <span class="keyword">if</span>(y1*y2&lt;=<span class="number">0</span> &amp;&amp; y3*y4&lt;=<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"intersect"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"disjoint"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="判断矩形是否重叠"><a href="#判断矩形是否重叠" class="headerlink" title="判断矩形是否重叠"></a>判断矩形是否重叠</h2><p>描述</p>
<blockquote>
<p>用具有x,y两个整型变量成员的结构类型SPoint来表示坐标点。用SRect结构类型来描述矩形，其中包含p1和p2两个SPoint成员分别表示矩形对角线上的两个点。<br>编写判断两个矩形是否重叠的函数。</p>
</blockquote>
<p>输入</p>
<blockquote>
<p>判断次数<br>矩形1的对角线顶点坐标x1、y1、x2、y2<br>矩形2的对角线顶点坐标x1、y1、x2、y2<br>……</p>
</blockquote>
<p>输出</p>
<blockquote>
<p>是否重叠</p>
</blockquote>
<p>输入样例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 5 2 9</span><br><span class="line">1 3 2 4</span><br><span class="line">5 6 7 8</span><br><span class="line">5 7 7 7</span><br><span class="line">2 5 1 0</span><br><span class="line">9 4 2 9</span><br></pre></td></tr></table></figure>
<p>输出样例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">not overlapped</span><br><span class="line">overlapped</span><br><span class="line">overlapped</span><br></pre></td></tr></table></figure>
<p>参考代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SPoint</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x1,y1,x2,y2;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">    <span class="keyword">while</span>(t--)&#123;</span><br><span class="line">        SPoint p1,p2;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;p1.x1&gt;&gt;p1.y1&gt;&gt;p1.x2&gt;&gt;p1.y2;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;p2.x1&gt;&gt;p2.y1&gt;&gt;p2.x2&gt;&gt;p2.y2;</span><br><span class="line">        <span class="keyword">if</span>(p1.x2&lt;p1.x1)&#123;</span><br><span class="line">            t=p1.x1;</span><br><span class="line">            p1.x1=p1.x2;</span><br><span class="line">            p1.x2=t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p1.y2&gt;p1.y1)&#123;</span><br><span class="line">            t=p1.y1;</span><br><span class="line">            p1.y1=p1.y2;</span><br><span class="line">            p1.y2=t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p2.x2&lt;p2.x1)&#123;</span><br><span class="line">            t=p2.x1;</span><br><span class="line">            p2.x1=p2.x2;</span><br><span class="line">            p2.x2=t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p2.y2&gt;p2.y1)&#123;</span><br><span class="line">            t=p2.y1;</span><br><span class="line">            p2.y1=p2.y2;</span><br><span class="line">            p2.y2=t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p1.y2&gt;p2.y1 || p1.y1&lt;p2.y2 || p1.x2&lt;p2.x1 || p1.x1&gt;p2.x2)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"not overlapped"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"overlapped"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="病人排队"><a href="#病人排队" class="headerlink" title="病人排队"></a>病人排队</h2><p>描述</p>
<blockquote>
<p>病人登记看病，编写一个程序，将登记的病人按照以下原则排出看病的先后顺序：<br>老年人（年龄 &gt;= 60岁）比非老年人优先看病。<br>老年人按年龄从大到小的顺序看病，年龄相同的按登记的先后顺序排序。<br>非老年人按登记的先后顺序看病。</p>
</blockquote>
<p>输入</p>
<blockquote>
<p>第1行，输入一个小于100的正整数，表示病人的个数；<br>后面按照病人登记的先后顺序，每行输入一个病人的信息，包括：一个长度小于10的字符串表示病&gt;人的ID（每个病人的ID各不相同且只含数字和字母），一个整数表示病人的年龄，中间用单个空格&gt;隔开。</p>
</blockquote>
<p>输出</p>
<blockquote>
<p>按排好的看病顺序输出病人的ID，每行一个。</p>
</blockquote>
<p>输入样例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5</span><br><span class="line">021075 40</span><br><span class="line">004003 15</span><br><span class="line">010158 67</span><br><span class="line">021033 75</span><br><span class="line">102012 30</span><br></pre></td></tr></table></figure>
<p>输出样例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">021033</span><br><span class="line">010158</span><br><span class="line">021075</span><br><span class="line">004003</span><br><span class="line">102012</span><br></pre></td></tr></table></figure>
<p>参考代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">message</span>&#123;</span></span><br><span class="line">    <span class="built_in">string</span> id;</span><br><span class="line">    <span class="keyword">int</span> age&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">auto</span> *p=<span class="keyword">new</span> message[n];</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">    message old[<span class="number">100</span>];</span><br><span class="line">    message young[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;p[i].id&gt;&gt;p[i].age;</span><br><span class="line">        <span class="keyword">if</span>(p[i].age&gt;=<span class="number">60</span>)&#123;</span><br><span class="line">            old[x]=p[i];</span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            young[y]=p[i];</span><br><span class="line">            y++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//冒泡排序，不可用选择排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;x<span class="number">-1</span>-i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(old[j+<span class="number">1</span>].age&gt;old[j].age)&#123;</span><br><span class="line">                message t=old[j];</span><br><span class="line">                old[j]=old[j+<span class="number">1</span>];</span><br><span class="line">                old[j+<span class="number">1</span>]=t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;x;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;old[i].id&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;y;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;young[i].id&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> []p;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>C++</title>
    <url>/C++/</url>
    <content><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    Node *next;</span><br><span class="line">&#125;;</span><br><span class="line">Node *head,*tail;</span><br><span class="line">head=<span class="keyword">new</span> Node;</span><br><span class="line">head-&gt;data=<span class="number">0</span>;</span><br><span class="line">head-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">tail=head;</span><br></pre></td></tr></table></figure>

<h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;num;</span><br><span class="line">Node *head,*pnew,*tail;</span><br><span class="line">head=<span class="keyword">new</span> Node;</span><br><span class="line">head-&gt;data=num;</span><br><span class="line">head-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">tail=head;</span><br><span class="line"><span class="keyword">while</span>(num--)&#123;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;data;</span><br><span class="line">    pnew=<span class="keyword">new</span> Node;</span><br><span class="line">    pnew-&gt;data=data;</span><br><span class="line">    pnew-&gt;next=<span class="literal">nullptr</span>;</span><br><span class="line">    tail-&gt;next=pnew;</span><br><span class="line">    tail=pnew;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(Node *head)</span></span>;</span><br><span class="line"></span><br><span class="line">show(head);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(Node *head)</span></span>&#123;</span><br><span class="line">    <span class="comment">//cout&lt;&lt;head-&gt;data&lt;&lt;' ';</span></span><br><span class="line">    <span class="keyword">while</span>(head-&gt;next)&#123;</span><br><span class="line">        head=head-&gt;next;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;head-&gt;data;</span><br><span class="line">        <span class="keyword">if</span>(head-&gt;next)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">(Node *head)</span></span>;</span><br><span class="line"></span><br><span class="line">destroy(head);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">(Node *head)</span></span>&#123;</span><br><span class="line">    Node *p;</span><br><span class="line">    <span class="keyword">while</span>(head-&gt;next)&#123;</span><br><span class="line">        p=head-&gt;next;</span><br><span class="line">        head-&gt;next=p-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deletenode</span><span class="params">(Node *H,<span class="keyword">int</span> i)</span></span>;</span><br><span class="line"></span><br><span class="line">deletenode(head,i);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deletenode</span><span class="params">(Node *H,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;=<span class="number">1</span> &amp;&amp; i&lt;=H-&gt;data)&#123;</span><br><span class="line">        Node *q=H;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">            q=q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        Node *p=q-&gt;next;</span><br><span class="line">        q-&gt;next=p-&gt;next;</span><br><span class="line">        H-&gt;data--;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Node *H,<span class="keyword">int</span> i,<span class="keyword">int</span> data)</span></span>;</span><br><span class="line"></span><br><span class="line">insert(head,index,data);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(Node *H,<span class="keyword">int</span> i,<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i&gt;=<span class="number">1</span> &amp;&amp; i&lt;=H-&gt;data+<span class="number">1</span>)&#123;</span><br><span class="line">        Node *p=<span class="keyword">new</span> Node;</span><br><span class="line">        Node *q=H;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line">            q=q-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;data=data;</span><br><span class="line">        p-&gt;next=q-&gt;next;</span><br><span class="line">        q-&gt;next=p;</span><br><span class="line">        H-&gt;data++;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="堆内存分配"><a href="#堆内存分配" class="headerlink" title="堆内存分配"></a>堆内存分配</h2><h3 id="一维"><a href="#一维" class="headerlink" title="一维"></a>一维</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">delete</span> []p;</span><br></pre></td></tr></table></figure>

<h3 id="二维"><a href="#二维" class="headerlink" title="二维"></a>二维</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> **p=<span class="keyword">new</span> <span class="keyword">int</span>*[m];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">    p[i]=<span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">    <span class="keyword">delete</span> []p[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> []a;</span><br></pre></td></tr></table></figure>

<h2 id="指针作函数参数"><a href="#指针作函数参数" class="headerlink" title="指针作函数参数"></a>指针作函数参数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap2</span><span class="params">( <span class="keyword">int</span> *px, <span class="keyword">int</span> *py )</span></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    t = *px; </span><br><span class="line">    *px = *py; </span><br><span class="line">    *py = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符串赋值"><a href="#字符串赋值" class="headerlink" title="字符串赋值"></a>字符串赋值</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">10</span>]=“hello”;<span class="comment">//初始化，ok</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">buffer</span>=“hello”;			<span class="comment">//数组名赋值，error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* pc;</span><br><span class="line">pc=<span class="string">"hello"</span>;				<span class="comment">//字符指针赋值，ok</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *cities[<span class="number">5</span>]=&#123;<span class="string">"Beijing"</span>,<span class="string">"Shenzhen"</span>,<span class="string">"Hangzhou"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* pc;</span><br><span class="line">pc=<span class="string">"hello"</span>;				<span class="comment">//error</span></span><br><span class="line"><span class="keyword">char</span> *cities[<span class="number">5</span>]=&#123;<span class="string">"Beijing"</span>,<span class="string">"Shenzhen"</span>,<span class="string">"Hangzhou"</span>&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="指针函数"><a href="#指针函数" class="headerlink" title="指针函数"></a>指针函数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span>  *<span class="title">add</span><span class="params">(<span class="keyword">int</span> *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	*x=*x+<span class="number">5</span>;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="const-指针"><a href="#const-指针" class="headerlink" title="const 指针"></a>const 指针</h2><h3 id="常量指针-指向常量的指针"><a href="#常量指针-指向常量的指针" class="headerlink" title="常量指针(指向常量的指针)"></a>常量指针(指向常量的指针)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a=<span class="number">89</span>,b=<span class="number">60</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p=&amp;a;</span><br><span class="line">p=&amp;b;		<span class="comment">//ok</span></span><br><span class="line">*p=<span class="number">100</span>;   	<span class="comment">//error</span></span><br></pre></td></tr></table></figure>

<h3 id="指针常量"><a href="#指针常量" class="headerlink" title="指针常量"></a>指针常量</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a =<span class="number">89</span>,b=<span class="number">60</span>;    </span><br><span class="line"><span class="keyword">int</span> *<span class="keyword">const</span>   p = &amp;a;</span><br><span class="line">p=&amp;b;		<span class="comment">//error</span></span><br><span class="line">*p=<span class="number">100</span>;   	 <span class="comment">//ok</span></span><br></pre></td></tr></table></figure>

<h3 id="常量指针常量-指向常量的指针常量"><a href="#常量指针常量-指向常量的指针常量" class="headerlink" title="常量指针常量 (指向常量的指针常量)"></a>常量指针常量 (指向常量的指针常量)</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a =<span class="number">89</span>,b;    </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *<span class="keyword">const</span> p = &amp;a;</span><br><span class="line">p=&amp;b;			<span class="comment">//error</span></span><br><span class="line">*p=<span class="number">100</span>;			<span class="comment">//error</span></span><br></pre></td></tr></table></figure>

<h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>* a,<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">9</span>,<span class="number">34</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">-5</span>,<span class="number">4</span>,<span class="number">23</span>,<span class="number">67</span>,<span class="number">-123</span>,<span class="number">0</span>&#125;;</span><br><span class="line">	<span class="keyword">void</span> (*pfun)(<span class="keyword">int</span> *a,<span class="keyword">int</span> n);		<span class="comment">//声明函数指针</span></span><br><span class="line">	pfun=sort;			<span class="comment">//给函数指针赋值</span></span><br><span class="line">	pfun(a,<span class="number">10</span>);				<span class="comment">//使用函数指针调用函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>* a,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="常用库函数"><a href="#常用库函数" class="headerlink" title="常用库函数"></a>常用库函数</h1><h2 id="最大最小值"><a href="#最大最小值" class="headerlink" title="最大最小值"></a>最大最小值</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">min</span>=INT_MAx;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">max</span>=INT_MIN;</span><br></pre></td></tr></table></figure>

<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">45</span>,<span class="number">12</span>,<span class="number">34</span>,<span class="number">77</span>,<span class="number">90</span>,<span class="number">11</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">55</span>&#125;;</span><br><span class="line">sort(a,a+<span class="number">10</span>);</span><br><span class="line">sort(a,a+<span class="number">10</span>,greater&lt;&gt;());</span><br></pre></td></tr></table></figure>

<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p><img src="../img/1.gif" alt="选择排序"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p[j]&gt;p[i])&#123;</span><br><span class="line">			<span class="keyword">int</span> t=p[i];</span><br><span class="line">			p[i]=p[j];</span><br><span class="line">			p[j]=t;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><img src="../img/2.gif" alt="冒泡排序"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>-i;j++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p[j+<span class="number">1</span>]&gt;p[j])&#123;</span><br><span class="line">			<span class="keyword">int</span> t=p[j];</span><br><span class="line">			p[j]=p[j+<span class="number">1</span>];</span><br><span class="line">			p[j+<span class="number">1</span>]=t;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="更多排序"><a href="#更多排序" class="headerlink" title="更多排序"></a>更多排序</h2><p><a href="https://www.cnblogs.com/onepixel/articles/7674659.html" target="_blank" rel="noopener">点击查看</a></p>
]]></content>
  </entry>
</search>
